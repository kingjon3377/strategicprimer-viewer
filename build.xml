<?xml version="1.0" encoding="utf-8" standalone="no"?>
<project default="all" name="SP viewer" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
    xmlns:if="ant:if" xmlns:unless="ant:unless">
  <target name="all" depends="clean,release" />
  <property file="build.properties" />
  <tstamp />
  <!-- ANT 1.7 is required -->

  <!-- Use ant-contrib, for the 'for' task and perhaps others -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!-- Versioning -->
  <property file="version.properties" />

  <!-- Paths to find necessary files and paths within the repository -->
  <property file="paths.local.properties" />
  <property file="paths.properties" />
  <condition property="onmac">
      <os family="mac" />
  </condition>

  <!-- The project now includes some Ceylon -->
  <path id="ceylon-ant-tasks">
       <pathelement location="${ceylon.ant.lib}"/>
   </path>
  <typedef resource="com/redhat/ceylon/ant/antlib.xml" classpathref="ceylon-ant-tasks"/>

  <!-- Clean targets -->
  <target name="clean">
    <delete dir="${bin_dir}" />
    <delete file="${invocation.path}" />
    <delete>
      <fileset dir="${basedir}" includes="icon_*px.png" />
      <fileset dir="${basedir}" includes="icon.ic*" />
    </delete>
    <delete dir="${basedir}/modules" />
    <delete dir="${basedir}/.exploded" />
  </target>
  <target depends="clean" name="cleanall">
    <delete dir="${release}" />
    <delete dir="${javadoc_dir}" />
  </target>

  <target name="get-builder">
    <exec executable="/usr/bin/git" outputproperty="scm.builder.username">
        <arg value="config" />
    <arg value="--get" />
    <arg value="user.name" />
    </exec>
    <exec executable="/usr/bin/git" outputproperty="scm.builder.email">
        <arg value="config" />
    <arg value="--get" />
    <arg value="user.email" />
    </exec>
    <property name="scm.builder"
              value="${scm.builder.username} &lt;${scm.builder.email}&gt;" />
    <echo message="${scm.builder}" />
  </target>

  <!-- Build targets -->
  <target name="init">
    <mkdir dir="${bin_dir}" />
    <copy includeemptydirs="false" todir="bin">
      <fileset dir="${source_dir}">
        <exclude name="**/*.launch" />
        <exclude name="**/*.ceylon" />
        <exclude name="**/*.java" />
        <exclude name="tables/" />
      </fileset>
    </copy>
  </target>
  <target name="init-ceylon">
      <ceylon-import-jar jar="${pumpernickel.path}" module="com.pump/0.0"
          failOnError="true" />
  </target>
  <macrodef name="x-rebuild" description="Rebuild the Ceylon code if anything's changed">
    <sequential>
      <ceylon-compile src="${ceylon.source.dir}" resource="${ceylon.resource.dir}"
                      encoding="UTF-8" pack200="true">
          <moduleset>
              <sourcemodules dir="${ceylon.source.dir}" />
          </moduleset>
      </ceylon-compile>
    </sequential>
  </macrodef>
  <target name="build" depends="init-ceylon">
      <!-- TODO: make a generated-resources folder instead of storing this in the same
           hierarchy as non-generated resource files -->
      <concat destfile="${invocation.path}"
              overwrite="true">ceylon run ${main-module}</concat>
      <x-rebuild />
  </target>
  <target name="doc" depends="build">
      <!-- FIXME: Uncomment this once Ceylon bug #6749 is fixed
    <ceylon-doc src="${ceylon.source.dir}" encoding="UTF-8">
        <moduleset>
            <sourcemodules dir="${ceylon.source.dir}" />
        </moduleset>
    </ceylon-doc>
    -->
  </target>

  <!-- Test targets -->
  <target name="test" depends="build">
    <ceylon-test failOnError="true">
        <moduleset>
            <!-- FIXME: Go back to <sourcemodules> once Ceylon bug #6986 is fixed -->
            <!--            <sourcemodules dir="${ceylon.source.dir}" /> -->
            <module name="strategicprimer.drivers.exploration.old" />
            <module name="strategicprimer.model.common" />
            <module name="strategicprimer.model.impl" />
            <module name="strategicprimer.report" />
            <module name="strategicprimer.drivers.worker.common" />
            <module name="strategicprimer.drivers.common" />
            <module name="strategicprimer.drivers.exploration.common" />
        </moduleset>
    </ceylon-test>
  </target>

  <!-- Targets to run static analysis. -->
  <!-- TODO: Find a Ceylon static analysis tool -->

  <!-- Release-related tasks. -->
  <taskdef name="launch4j"
    classname="net.sf.launch4j.ant.Launch4jTask"
    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
  <taskdef name="jarbundler"
    classname="com.ultramixer.jarbundler.JarBundler" />

  <macrodef name="x-ceylon-fat-jar"
            description='Create a Ceylon "fat JAR" of the project'>
      <attribute name="out" default="${release}/${basename}.jar"
                 description="Where to place the JAR" />
      <attribute name="run" default="${ceylon-main-run}"
          description="The method that should run by default when the JAR is invoked" />
      <attribute name="module" default="${main-module}"
                 description="Which module to package into the JAR" />
      <!-- The overrides parameter is needed because ceylon.transaction, a hard
           dependency of ceylon.dbc, pulls in (via one of its dependencies) two
           conflicting versions of org.jboss.logging. -->
      <attribute name="overrides" default=""
          description="Maven overrides file to use to fix dependency issues" />
      <sequential>
          <local name="overrides-value" />
          <property name="overrides-value" value="@{overrides}" />
          <!-- there isn't a ceylon-fat-jar Ant task (yet) -->
          <exec executable="${ceylon.executable}" failOnError="true">
              <!-- TODO: We'd like to use 'ceylon assemble' instead, but a) it
                   generates a _larger_ JAR file, and b) it's blocked by
                   eclipse/ceylon#7225. -->
              <arg value="fat-jar" />
              <arg value="--out=@{out}" />
              <arg value="--run=@{run}" />
              <arg value="--overrides=@{overrides}" if:set="overrides-value" />
              <arg value="@{module}" />
          </exec>
      </sequential>
  </macrodef>
  <!-- Release targets -->
  <target name="jar" depends="test,get-builder,build">
    <concat destfile="${invocation.path}"
            overwrite="true">java -jar /path/to/${basename}.jar</concat>
    <x-rebuild />
    <x-ceylon-fat-jar out="${release}/${basename}.jar" run="${ceylon-main-run}"
        module="${main-module}" overrides="lib/org.jboss.logging.override.xml" />
  </target>
  <target name="icon">
    <for list="512,256,128,64,48,32,16" param="resolution">
      <sequential>
          <exec executable="${convert.path}" dir="${basedir}" failOnError="true">
          <arg value="resource/strategicprimer/viewer/images/icon.png" />
      <arg value="-adaptive-resize" />
      <arg value="@{resolution}x@{resolution}" />
      <arg value="icon_@{resolution}px.png" />
        </exec>
      </sequential>
    </for>
  </target>
  <target name="exe" depends="jar,icon">
      <exec executable="${icotool.path}" dir="${basedir}">
      <arg value="-o" />
      <arg value="icon.ico" />
      <arg value="--create" />
      <arg value="icon_64px.png" />
      <arg value="icon_32px.png" />
      <arg value="icon_16px.png" />
    </exec>
    <concat destfile="${invocation.path}"
            overwrite="true">/path/to/${basename}.exe</concat>
    <x-rebuild />
    <x-ceylon-fat-jar out="${release}/${basename}-for-exe.jar" run="${ceylon-main-run}"
                      module="${main-module}" overrides="lib/org.jboss.logging.override.xml" />
    <launch4j configFile="${project_home}/launch4j.cfg.xml"
      outfile="${release}/${basename}.exe" jar="${release}/${basename}-for-exe.jar" />
    <delete file="${release}/${basename}-for-exe.jar" />
  </target>
  <target name="app" depends="jar,icon">
      <exec executable="${png2icns.path}" dir="${basedir}">
      <arg value="icon.icns" />
      <arg value="icon_512px.png" />
      <arg value="icon_256px.png" />
      <arg value="icon_128px.png" />
      <arg value="icon_48px.png" />
      <arg value="icon_32px.png" />
      <arg value="icon_16px.png" />
    </exec>
    <concat destfile="${invocation.path}" overwrite="true">open /path/to/${basename}.app --args</concat>
    <x-rebuild />
    <x-ceylon-fat-jar out="${release}/${shortname}.jar" run="${ceylon-main-run}"
                      module="${main-module}" overrides="lib/org.jboss.logging.override.xml" />
    <jarbundler dir="${release}" name="${basename}" mainclass="${main-class}"
      jar="${release}/${shortname}.jar" version="${version-number}"
      shortname="SPHelpers" stubfile="${stub-script-path}"
      icon="icon.icns" useJavaXKey="true">
      <javaproperty name="apple.eawt.quitStrategy" value="CLOSE_ALL_WINDOWS" />
      <documenttype name="Strategic Primer map files" extensions="map xml"
                    role="Editor" />
    </jarbundler>
    <tar destfile="${release}/${basename}.app.tbz2" compression="bzip2">
      <tarfileset dir="${release}">
        <include name="${basename}.app/**" />
      </tarfileset>
    </tar>
    <delete file="${release}/${shortname}.jar" />
  </target>
  <target name="dmg" depends="app">
    <mkdir dir="${release}/dmgtmp" />
    <copy todir="${release}/dmgtmp/${basename}.app">
        <fileset dir="${release}/${basename}.app" />
    </copy>
    <exec executable="${mkisofs.path}" dir="${release}/dmgtmp">
      <arg value="-V" />
      <arg value="${appname}" />
      <arg value="-no-pad" />
      <arg value="-r" />
      <arg value="-hfs" />
      <arg line="-o ../${basename}.dmg" />
      <arg value="." />
    </exec>
    <delete dir="${release}/${basename}.app" />
    <delete><fileset dir="${release}/dmgtmp" /></delete>
  </target>
  <target name="dist" depends="build,doc">
    <concat destfile="${invocation.path}" overwrite="true">ceylon run ${main-module}</concat>
    <x-rebuild />
    <tar destfile="${release}/${basename}.tbz2" compression="bzip2">
      <tarfileset dir="${project_home}" prefix="${basename}">
        <include name="*.properties" />
        <include name="build.xml" />
        <include name=".checkstyle" />
        <include name=".classpath" />
        <include name=".lint4jprefs" />
        <include name=".pmd" />
        <include name=".project" />
        <include name="checkstyle.xml" />
        <include name="launch4j.cfg.xml" />
        <include name=".eclipse-pmd" />
        <include name=".travis.yml" />
        <include name="COPYING" />
        <include name="README.md" />
        <include name="*.sh" />
        <include name="viewer.eml" />
        <include name="viewer-ceylon.iml" />
        <include name="sample_map.xml" />
      </tarfileset>
      <tarfileset dir="source" prefix="${basename}/source">
        <include name="**" />
      </tarfileset>
      <tarfileset dir="resource" prefix="${basename}/resource">
        <include name="**" />
      </tarfileset>
      <tarfileset dir="modules" prefix="${basename}/modules">
        <include name="**" />
      </tarfileset>
      <tarfileset dir=".idea" prefix="${basename}/.idea">
          <include name="**" />
          <exclude name="workspace.xml" />
      </tarfileset>
      <tarfileset dir=".settings" prefix="${basename}/.settings">
          <include name="**" />
      </tarfileset>
    </tar>
  </target>
  <target name="release"
    depends="app,exe,jar,dmg,dist" />
  <!-- TODO: Find a Ceylon code-coverage tool and make a 'coverage' target -->
</project>
